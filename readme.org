#+TITLE: sheep : a Simulation HElpEr for setting Parameters
#+AUTHOR: Thomas Rometsch
#+SETUPFILE: styles/theme-readtheorg-local.setup
#+PROPERTY: header-args :eval never-export
#+filetags: sheep

* Introduction

Performing physics simulations requiries setting them up in the first place.
The physical setup needs to be defined, usually by writing some extra code for initial conditions.
At least this is the case for simulations of protoplanetary disks, the simulations I do, and for the codes PLUTO and FARGO3D.

In addition to the setup (the FARGO3D user guide explains the concept quite nicely), parameters have to be set.
Often, multiple runs of the same setup with different parameters are required.
One extreme of that are large parameter studies, in which the code should remain the same and only parameteres change.

Setting the parameters by hand in a text editor is fine for a small number of runs.
Having to deal with a large parameter space, however, this gets very tedious and time consuming.
Since the problem is well defined - changing a string in a text file - the process can be automated.

Using different codes with possibly different structure to simulate the same physical setup makes things even worse.
Let me illustrate this with an example.
I aim at running the same physical setup with two codes, the PLUTO and FARGO3D astrophysics hyrdordynamical codes.
The both allow the usage of setups and the both have files for specifying parameter.
In both cases there are two different parameter files
One for parameters which need to be known before compiling the code and one file for parameters which can be set after compilation.
Since I compile the code for every run anyways (the compilation time is neglegible compared to the simulation time), I don't want to bother with that.
I simply want to specify parameters using only one programmable interface for any type of paramerter (pre-compilation, post-compilation) and for any code.

This is where =sheep= comes in.

* Goals

1. abstract the process of setting parameters
   - when doing physics research, technical details should be irrelevant
   - hide different types of parameters (pre-/post-compilation) behind a common interface
2. define a generic interface for preparing physics simulations for different codes
   - streamline the preparation of simulations by providing a common interface
   - define common names for the parameters and translate them to each code
   - adapt to specific requirements of code in an automatic way
	 * choice of units
	 * syntax rules
3. provide scripts with a common interface
   - starting
	 * number of CPU cores
	 * number of GPU cores
	 * GPU device
   - restarting
	 * same as in starting
	 * output file to be used
   - making the code considering architechture choices
	 * parallel vs sequential (MPI)
	 * CPU vs GPU (CUDA)
4. support the usage of setups
5. check that parameters are reasonable by specifying simple rules (e.g. boundaries on the value)

* Deployment scripts

The =scripts= folder contains multiple scripts to be used with sheep.
Version 1 emerged from helper scripts written while using the Fargo and Fargo3d code.

The location of the scripts are specified in the =sheep.xml= file and are saved into the sheep under standard names.
This way, scripts with different versions file may be used together and setup specific files can be used without altering the other files.

Note the =sheep_env= file, which is much like a shell's =rc= file setting environment variables.
This is the right place to define environment variables like paths to libraries for different hosts.

** version 1

| filename | translated to | purpose                                     |
|----------+---------------+---------------------------------------------|
| env      | sheep_env     | set environment variables depending on host |
| setup.sh | sheep_queue   | setup the code: compile, copy, ...          |
| queue.sh | sheep_queue   | queue a job in the correct way              |
| start.sh | sheep_start   | start or restart a job                      |

* Container structure

The basic functionality of the sheep container is to abstract the process of running
some arbitrary code.
A list of actions I might need is

+ simulation
+ postprocessing
+ visualization
+ archiving

My current practice is, to use a new workspace for every simulation, i.e. for every
run of my simulation programs.
I want to be able to run additional programs on the output of these simulations.
Just as for the simulations themselves, I want to use an abstract interface to start,
stop or queue these programs and leave the program code and executable inside the
workspace to make it reproduceable.

The Docker container files inspired me to have some kind of container structure.
These have a =run.sh= script which starts the program inside the Docker file.

For my programs and simulations a container file could be structured as follows

#+BEGIN_EXAMPLE
+ sample_container
+---> start.sh		supports starting and restarting (optional)
+---> queue.sh
+---> meta.xml or meta.json or ...
+--+ program
   +---> some_executable
   +---> ...
#+END_EXAMPLE


* Enhancements

** DONE allow specifying inital conditions for planet systems
SCHEDULED: <2018-08-22 Mi>

Both, PlutoCUDA and Fargo3d, support setting intial conditions of planets using a simple tab separated ini file.
Write a parser for this file an make it available in sheep.

Done in new scripts

** DONE save tars to remote host directly
SCHEDULED: <2018-08-23 Do>

* Changelog

** v1.2.0 2018-08-23

+ support saving the tar to a remote host directly using =scp= syntax
+ copy config to sheep dir instead of root dir

** v1.1.0 2018-08-21

+ new structure of scripts
  require at least a runscript
